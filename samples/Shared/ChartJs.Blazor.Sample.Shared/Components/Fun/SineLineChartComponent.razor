@using System.Timers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using System.Diagnostics

@implements IDisposable

<h2>Sine Line Chart</h2>
<Chart @ref="_lineChartJs"
        Config="@_lineConfig"
        TConfig="LineConfig"
        Width="600"
        Height="300"/>

<button class="btn btn-primary" @onclick="Start">Start</button>
<button class="btn btn-primary" @onclick="Stop">Stop</button>

@code
{
    LineConfig _lineConfig;
    Chart<LineConfig> _lineChartJs;

    private LineDataset<Point> _sineSet;

    private Timer _timer;
    private Stopwatch _stopWatch;

    protected override void OnInitialized()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Sine Line Chart"
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                Callback = new JavaScriptHandler<AxisTickCallback>("SampleInterop.MsTicksCallback")
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Sine"
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _sineSet = new LineDataset<Point>
        {
            BackgroundColor = ColorUtil.ColorString(0, 255, 0, 1.0),
            BorderColor = ColorUtil.ColorString(0, 0, 255, 1.0),
            Label = "Sine set",
            Fill = false,
            PointBackgroundColor = ColorUtil.RandomColorString(),
            BorderWidth = 1,
            PointRadius = 3,
            PointBorderWidth = 1,
        };

        _lineConfig.Data.Datasets.Add(_sineSet);

        _timer = new Timer(300) { AutoReset = true };
        _timer.Elapsed += TimerOnElapsed;
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        var x = _stopWatch.ElapsedMilliseconds;
        var fileTimeAsRadians = x * 0.0174533;
        _sineSet.Add(new Point(x, Math.Sin(fileTimeAsRadians)));

        if (_sineSet.Data.Count > 30)
        {
            _sineSet.RemoveAt(0);
        }

        _lineChartJs.Update();
    }

    private void Start()
    {
        _stopWatch = Stopwatch.StartNew();
        _timer.Start();
    }

    private void Stop()
    {
        _timer.Stop();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
