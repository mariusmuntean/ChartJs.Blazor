@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Sample.Shared.Services
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.Util
@inject IJSRuntime JsRuntime

<h2>Time Line Chart</h2>
<Chart @ref="_lineChartJs"
       Config="@_lineConfig"
       TConfig="LineConfig"
       Width="600"
       Height="300" />

<div class="row">
    <button class="btn btn-primary" @onclick="OnClick">Fill On/Off</button>
</div>

@code
{
    LineConfig _lineConfig;
    Chart<LineConfig> _lineChartJs;
    const string DeCh = "de-ch";
    LineDataset<TimePoint> _tempDataSet;
    private bool _localeChangeWasAttempted = false;
    private bool _filled;

    readonly WeatherForecastService _forecastService = new WeatherForecastService();

    private async Task TryChangeLocale()
    {
        if (_localeChangeWasAttempted) return;
        _localeChangeWasAttempted = true;

        var locales = await JsRuntime.GetAvailableLocales();
        bool localeChanged = false;
        if (locales != null && locales.Contains(DeCh))
        {
            localeChanged = await JsRuntime.ChangeLocale(DeCh);
        }

        if (!localeChanged) Console.WriteLine($"Locale was not changed to {DeCh}. Either it already is {DeCh} or this locale doesn't exist.");
    }

    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        var forecasts = await _forecastService.GetForecastAsync(DateTime.Now, 2);

        _tempDataSet = new LineDataset<TimePoint>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Temperature in C°",
            Fill = FillingMode.Disabled,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        _tempDataSet.AddRange(forecasts.Select(p => new TimePoint(p.Date, p.TemperatureC)));
        _lineConfig.Data.Datasets.Add(_tempDataSet);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryChangeLocale();
    }

    private async Task OnClick()
    {
        _tempDataSet.Fill = (_filled = !_filled);
        await _lineChartJs.Update();
    }
}
