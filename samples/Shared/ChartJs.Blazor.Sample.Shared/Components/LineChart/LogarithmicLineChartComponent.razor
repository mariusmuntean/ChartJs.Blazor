@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.Sample.Shared.Services
@using ChartJs.Blazor.Util

<h2>Logarithmic Line Chart</h2>
<Chart @ref="_lineChartJs"
        Config="@_lineConfig"
        TConfig="LineConfig"
        Width="600"
        Height="300"/>

@code
{
    LineConfig _lineConfig;
    Chart<LineConfig> _lineChartJs;

    WeatherForecastService _forecastService = new WeatherForecastService();

    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMin = -2
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LogarithmicAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temp"
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        var tempPerHourSet = new LineDataset<Point>
        {
            BackgroundColor = ColorUtil.ColorString(0, 255, 0, 1.0),
            BorderColor = ColorUtil.ColorString(0, 0, 255, 1.0),
            Label = "Temp (C) per Hour",
            Fill = false,
            PointBackgroundColor = ColorUtil.RandomColorString(),
            BorderWidth = 1,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
        };

        var tempPerDaySet = new LineDataset<Point>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Temp (F) per Day",
            Fill = false,
            BorderWidth = 1,
            PointRadius = 2,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
        };

        WeatherForecast[] forecasts = await _forecastService.GetStaticForecastAsync(DateTime.Now, 5);

        var onlyDays = forecasts.GroupBy(f => f.Date.Day).Select(g => g.First());

        var weatherForecasts = onlyDays.ToList();
        tempPerHourSet.AddRange(weatherForecasts.Select(p => new Point(p.Date.Hour, p.TemperatureC)));
        tempPerDaySet.AddRange(weatherForecasts.Select(p => new Point(p.Date.Day, p.TemperatureF)));

        _lineConfig.Data.Datasets.Add(tempPerHourSet);
        _lineConfig.Data.Datasets.Add(tempPerDaySet);
    }
}