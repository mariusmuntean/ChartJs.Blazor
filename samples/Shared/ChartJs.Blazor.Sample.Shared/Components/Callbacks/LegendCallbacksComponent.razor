@using System.Globalization
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.Util
@using Newtonsoft.Json.Linq;

<h1>Pie Chart with legend callbacks</h1>

<Chart @ref="_pieChartJs"
                 Config="@_config"
                 TConfig="PieConfig"
                 Width="600"
                 Height="300" />

<div class="container">
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="AddData">Add data</button>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger" @onclick="RemoveData">Remove data</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="AddDataset">Add dataset</button>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger" @onclick="RemoveDataset">Remove dataset</button>
        </div>
    </div>
</div>

@code {
    private PieConfig _config;
    private Chart<PieConfig> _pieChartJs;

    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Sample chart with legend callbacks"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Legend = new Legend
                {
                    OnHover = new DelegateHandler<LegendItemMouseEvent>(ShowEventAndArgs),
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true,
                        GenerateLabels = new JavaScriptHandler<LegendLabelsGenerator>("SampleInterop.CreateLabels"),
                        Filter = new DelegateHandler<LegendLabelFilter>(LabelsFilter) // new JavaScriptHandler<LegendLabelFilter>("SampleInterop.Filter") // 
                    }
                }
            }
        };

        _config.Data.Labels.AddRange(new[] { "A", "B", "C", "D", "E" });

        var pieSet = new PieDataset
        {
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        pieSet.AddRange(new double[] { 4, 5, 6, 7, 8 });
        _config.Data.Datasets.Add(pieSet);
    }

    private async Task AddData()
    {
        var dataset = _config.Data.Datasets.LastOrDefault();
        if (dataset == null) return;

        var rand = new Random();
        var newVal = 1 + rand.NextDouble() * 10;
        _config.Data.Labels.Add(newVal.ToString(CultureInfo.InvariantCulture));
        dataset.Add(newVal);
        dataset.BackgroundColor = dataset.BackgroundColor.IndexedValues.Append(ColorUtil.RandomColorString()).ToArray();

        await _pieChartJs.Update();
    }

    private async Task RemoveData()
    {
        var dataset = _config.Data.Datasets.LastOrDefault();
        if (dataset == null || dataset.Data.Count < 1) return;

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);
        dataset.RemoveAt(dataset.Data.Count - 1);

        await _pieChartJs.Update();
    }

    private async Task AddDataset()
    {
        var pieSet = new PieDataset
        {
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        // determine the number of data points to add
        int count = _config.Data.Labels.Count;

        var rand = new Random();
        pieSet.AddRange(Enumerable.Range(0, count).Select(i => Convert.ToDouble(rand.Next(0, 10))));
        pieSet.BackgroundColor = Enumerable.Range(0, count).Select(i => ColorUtil.RandomColorString()).ToArray();

        _config.Data.Datasets.Add(pieSet);
        await _pieChartJs.Update();
    }

    private async Task RemoveDataset()
    {
        if (_config.Data.Datasets.Count > 1)
        {
            _config.Data.Datasets.RemoveAt(_config.Data.Datasets.Count - 1);
            await _pieChartJs.Update();
        }
    }

    public void ShowEventAndArgs(JObject @event, LegendItem args)
    {
        Console.WriteLine($"Index: {args.Index}, Hidden: {args.Hidden}, Text: '{args.Text}'");
    }

    private bool LabelsFilter(LegendItem item, [IgnoreCallbackValue] JObject chart)
    {
        int index = item.Index.Value;
        bool shown = index % 3 != 0;
        Console.WriteLine($"Index: {index} -> {(shown ? "shown" : "hidden")}");

        return shown;
    }
}