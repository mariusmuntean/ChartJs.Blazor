@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
<h2>Horizontal Bar Chart</h2>
<div class="row">
    <button class="btn btn-primary" @onclick="AddData">Add Data</button>
    <button class="btn btn-primary" @onclick="RemoveData">Remove Data</button>
</div>
<Chart @ref="_barChart"
       Config="@_barChartConfig"
       TConfig="ChartJs.Blazor.ChartJS.BarChart.BarConfig"
       Width="600"
       Height="300" />

@code
{
    private BarConfig _barChartConfig;
    private Chart<BarConfig> _barChart;
    private BarDataset<double> _barDataSet;

    protected override Task OnInitializedAsync()
    {
        // Note the constructor argument
        _barChartConfig = new BarConfig(ChartType.HorizontalBar)
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Simple Bar Chart"
                },
                Responsive = true,
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                AutoSkip = false,
                                Min = 0 // Otherwise the lowest value in the dataset won't be visible
                            }
                        }
                    }
                }
            }
        };

        _barChartConfig.Data.Labels.AddRange(new[] { "A", "B", "C", "D" });

        //Note the constructor argument
        _barDataSet = new BarDataset<double>(horizontal: true)
        {
            Label = "My double dataset",
            BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
            BorderColor = ColorUtil.RandomColorString(),
            BorderWidth = 1
        };

        _barDataSet.AddRange(new double[] { 8, 5, 3, 7 });
        _barChartConfig.Data.Datasets.Add(_barDataSet);

        return Task.CompletedTask;
    }

    private async Task AddData()
    {
        var nowSecond = DateTime.Now.Second;
        _barChartConfig.Data.Labels.Add(nowSecond.ToString());
        _barDataSet.Add(nowSecond);
        _barDataSet.BackgroundColor = _barChartConfig.Data.Labels.Select(l => ColorUtil.RandomColorString()).ToArray();

        _barChartConfig.Options.Title.Text += DateTime.Now.Second.ToString();

        await _barChart.Update();
    }

    private async Task RemoveData()
    {
        if (_barChartConfig.Data.Labels.Count > 0)
        {
            _barChartConfig.Data.Labels.RemoveAt(_barChartConfig.Data.Labels.Count - 1);
        }

        if (_barDataSet.Data.Count > 0)
        {
            _barDataSet.RemoveAt(_barDataSet.Data.Count - 1);
        }

        await _barChart.Update();
    }
}
