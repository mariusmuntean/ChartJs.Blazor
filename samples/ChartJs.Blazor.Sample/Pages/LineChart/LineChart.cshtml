@page "/LineChart"
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Sample.Shared.Components
@using Newtonsoft.Json

<h2>Line Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsLineChart ref="lineChartJs" Config="@lineChartConfig" Width="600" Height="300"/>

<DataSetDisplay ref="_dataSetDisplay" bind-DataSetsStr="@DataSetsStr" Width="600" Height="300"/>

@functions{

    public LineChartConfig lineChartConfig { get; set; }
    ChartJsLineChart lineChartJs;

    DataSetDisplay _dataSetDisplay;

    string DataSetsStr
    {
        get => JsonConvert.SerializeObject(lineChartConfig.Data.Datasets, Formatting.Indented);
        set
        {
            lineChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<LineChartDataset>>(value);
            Console.WriteLine(JsonConvert.SerializeObject(lineChartConfig.Data.Datasets));
        }
    }

    protected override void OnInit()
    {
        lineChartConfig = lineChartConfig ?? new LineChartConfig
        {
            CanvasId = "myFirstLineChart",
            Options = new LineChartOptions
            {
                Text = "Sample chart from Blazor",
                Display = true,
                Responsive = true,
                Title = new OptionsTitle {Display = true, Text = "Line Chart"},
                Legend = new Legend
                {
                    Position = LegendPosition.BOTTOM.ToString(),
                    Labels = new Labels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = Mode.nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<Axis>
                    {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = ".labelString"
                            }
                        }
                    },
                    yAxes = new List<Axis>
                    {
                        new Axis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "..label"
                            }
                        }
                    }
                },
                Hover = new LineChartOptionsHover
                {
                    Intersect = true,
                    Mode = Mode.nearest
                }
            },
            Data = new LineChartData
            {
                Labels = new List<string> {"Red", "Blue", "Yellow", "Green", "Purple", "Orange"},
                Datasets = new List<LineChartDataset>
                {
                    new LineChartDataset
                    {
                        BackgroundColor = "#ff6384",
                        BorderColor = "#ff6384",
                        Label = "# of Votes from blazor",
                        Data = new List<object> {4, 6, 2, 7, 9, 1},
                        Fill = false,
                        BorderWidth = 2,
                        PointRadius = 3,
                        PointBorderWidth = 1
                    }
                }
            }
        };
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("OnAfterRender");
        lineChartJs.Reload();

        _dataSetDisplay.OnUpdatedDataSetsStr += (dataSetsStr) =>
        {
            lineChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<LineChartDataset>>(dataSetsStr);
            lineChartJs.Reload();
        };
    }

    public void UpdateChart()
    {
    //Update existing dataset
        var rand = new Random();
        lineChartConfig.Data.Labels.Add($"New{DateTime.Now.Second}");

        lineChartConfig.Data.Datasets.ForEach(dataset =>
        {
            var next = rand.Next(dataset.Data.Select(Convert.ToInt32).Max());
            dataset.Data.Add(next);
        });

        lineChartJs.Reload();
    }

    protected override Task OnInitAsync()
    {
        Console.WriteLine("OnInitAsync");
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParameterSet");
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParameterSetAsync");
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    protected override Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        return Task.CompletedTask;
    }

}