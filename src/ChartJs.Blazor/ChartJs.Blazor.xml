<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChartJs.Blazor</name>
    </assembly>
    <members>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis">
            <summary>
            Extended version of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CategoryAxis"/> for use in a bar chart.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#scale-configuration </para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis"/> class.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.BarPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each bar should be within the category width.
            1.0 will take the whole category width and put the bars right next to each other.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.CategoryPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each category should be within the sample width.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.BarThickness">
            <summary>
            Gets or sets the width of each bar in pixels.
            If set to <see cref="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex"/>, it computes "optimal" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.MaxBarThickness">
            <summary>
            Gets or sets the maximum bar thickness.
            Set this to ensure that bars are not sized thicker than this.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.MinBarLength">
            <summary>
            Gets or sets the minimum bar length.
            Set this to ensure that bars have a minimum length in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.OffsetGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines will be shifted to be between labels or not.
            If <c>true</c>, the bars for a particular data point fall between the grid lines.
            The grid line will move to the left by one half of the tick interval.
            If <c>false</c>, the grid line will go right down the middle of the bars.
            <para>Changing this value will directly affect <see cref="P:ChartJs.Blazor.ChartJS.Common.GridLines.OffsetGridLines"/> of the property <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.GridLines"/> in this instance.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarCategoryAxis.Stacked">
            <summary>
            Gets or sets a value indicating whether the bar chart is stacked or not.
            Bar charts can be configured into stacked bar charts by changing the settings on the X and Y axes to enable stacking.
            Stacked bar charts can be used to show how one data series is made up of a number of smaller pieces.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#stacked-bar-chart </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis">
            <summary>
            Extended version of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis"/> for use in a bar chart.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#scale-configuration </para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis"/> class.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.BarPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each bar should be within the category width.
            1.0 will take the whole category width and put the bars right next to each other.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.CategoryPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each category should be within the sample width.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.BarThickness">
            <summary>
            Gets or sets the width of each bar in pixels.
            If set to <see cref="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex"/>, it computes "optimal" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.MaxBarThickness">
            <summary>
            Gets or sets the maximum bar thickness.
            Set this to ensure that bars are not sized thicker than this.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.MinBarLength">
            <summary>
            Gets or sets the minimum bar length.
            Set this to ensure that bars have a minimum length in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.OffsetGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines will be shifted to be between labels or not.
            If <c>true</c>, the bars for a particular data point fall between the grid lines.
            The grid line will move to the left by one half of the tick interval.
            If <c>false</c>, the grid line will go right down the middle of the bars.
            <para>Changing this value will directly affect <see cref="P:ChartJs.Blazor.ChartJS.Common.GridLines.OffsetGridLines"/> of the property <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.GridLines"/> in this instance.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLinearCartesianAxis.Stacked">
            <summary>
            Gets or sets a value indicating whether the bar chart is stacked or not.
            Bar charts can be configured into stacked bar charts by changing the settings on the X and Y axes to enable stacking.
            Stacked bar charts can be used to show how one data series is made up of a number of smaller pieces.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#stacked-bar-chart </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis">
            <summary>
            Extended version of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LogarithmicAxis"/> for use in a bar chart.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#scale-configuration </para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis"/> class.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.BarPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each bar should be within the category width.
            1.0 will take the whole category width and put the bars right next to each other.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.CategoryPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each category should be within the sample width.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.BarThickness">
            <summary>
            Gets or sets the width of each bar in pixels.
            If set to <see cref="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex"/>, it computes "optimal" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.MaxBarThickness">
            <summary>
            Gets or sets the maximum bar thickness.
            Set this to ensure that bars are not sized thicker than this.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.MinBarLength">
            <summary>
            Gets or sets the minimum bar length.
            Set this to ensure that bars have a minimum length in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.OffsetGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines will be shifted to be between labels or not.
            If <c>true</c>, the bars for a particular data point fall between the grid lines.
            The grid line will move to the left by one half of the tick interval.
            If <c>false</c>, the grid line will go right down the middle of the bars.
            <para>Changing this value will directly affect <see cref="P:ChartJs.Blazor.ChartJS.Common.GridLines.OffsetGridLines"/> of the property <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.GridLines"/> in this instance.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarLogarithmicAxis.Stacked">
            <summary>
            Gets or sets a value indicating whether the bar chart is stacked or not.
            Bar charts can be configured into stacked bar charts by changing the settings on the X and Y axes to enable stacking.
            Stacked bar charts can be used to show how one data series is made up of a number of smaller pieces.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#stacked-bar-chart </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis">
            <summary>
            Extended version of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis"/> for use in a bar chart.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#scale-configuration </para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis"/> class.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.BarPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each bar should be within the category width.
            1.0 will take the whole category width and put the bars right next to each other.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.CategoryPercentage">
            <summary>
            Gets or sets the percentage (0-1) of the available width each category should be within the sample width.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.BarThickness">
            <summary>
            Gets or sets the width of each bar in pixels.
            If set to <see cref="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex"/>, it computes "optimal" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.MaxBarThickness">
            <summary>
            Gets or sets the maximum bar thickness.
            Set this to ensure that bars are not sized thicker than this.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.MinBarLength">
            <summary>
            Gets or sets the minimum bar length.
            Set this to ensure that bars have a minimum length in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.OffsetGridLines">
            <summary>
            Gets or sets a value indicating whether grid lines will be shifted to be between labels or not.
            If <c>true</c>, the bars for a particular data point fall between the grid lines.
            The grid line will move to the left by one half of the tick interval.
            If <c>false</c>, the grid line will go right down the middle of the bars.
            <para>Changing this value will directly affect <see cref="P:ChartJs.Blazor.ChartJS.Common.GridLines.OffsetGridLines"/> of the property <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.GridLines"/> in this instance.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.Axes.BarTimeAxis.Stacked">
            <summary>
            Gets or sets a value indicating whether the bar chart is stacked or not.
            Bar charts can be configured into stacked bar charts by changing the settings on the X and Y axes to enable stacking.
            Stacked bar charts can be used to show how one data series is made up of a number of smaller pieces.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#stacked-bar-chart </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarConfig">
            <summary>
            Config for a <see cref="T:ChartJs.Blazor.Charts.ChartJsBarChart"/>.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarConfig.#ctor(ChartJs.Blazor.ChartJS.Common.Enums.ChartType)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarConfig"/> class.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarData">
            <summary>
            The data-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarConfig"/>.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarData"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarData.Datasets">
            <summary>
            The datasets displayed in this chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarData.Labels">
            <summary>
            Gets or sets the labels.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1">
            <summary>
            A dataset for a <see cref="T:ChartJs.Blazor.Charts.ChartJsBarChart"/>.
            </summary>
            <para>As per documentation here: http://www.chartjs.org/docs/latest/charts/bar.html#dataset-properties. </para>
            <typeparam name="TData">Defines the type of data in this dataset. Use Wrappers from <see cref="N:ChartJs.Blazor.ChartJS.Common.Wrappers"/> for value types.</typeparam>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.#ctor(System.Collections.Generic.IEnumerable{`0},ChartJs.Blazor.ChartJS.Common.Enums.ChartType)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1"/> class.
            </summary>
            <param name="data">The data to initialize the dataset with.</param>
            <param name="chartType">An optional <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.ChartType"/>, either <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Bar"/> or <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.HorizontalBar"/></param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.#ctor(ChartJs.Blazor.ChartJS.Common.Enums.ChartType)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1"/> class.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.Type">
            <summary>
            Gets the chart type (<see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Bar"/> in this case). This is needed for mixed datasets only.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.BorderSkipped">
            <summary>
            Gets or sets a value to avoid drawing the bar stroke at the base of the fill.
            In general, this does not need to be changed except when creating chart types that derive from a bar chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.Label">
            <summary>
            Gets or sets the label for the dataset which appears in the legend and tooltips.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.XAxisId">
            <summary>
            Gets or sets the ID of the x axis to plot this dataset on. If not specified, this defaults to the ID of the first found x axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.YAxisId">
            <summary>
            Gets or sets the ID of the y axis to plot this dataset on. If not specified, this defaults to the ID of the first found y axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.Stack">
            <summary>
            Gets or sets the id of the group to which this dataset belongs to (when stacked, each group will be a separate stack).
            <para>
            Specific for stacked bar charts.
            </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.BackgroundColor">
            <summary>
            Gets or sets the fill color of the bars in the dataset.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.BorderColor">
            <summary>
            Gets or sets the border color of the bars in the dataset.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.BorderWidth">
            <summary>
            Gets or sets the border width of the bars in the dataset.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.HoverBackgroundColor">
            <summary>
            Gets or sets the fill color of the bars when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.HoverBorderColor">
            <summary>
            Gets or sets the stroke color of the bars when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarDataset`1.HoverBorderWidth">
            <summary>
            Gets or sets the stroke width of the bars when hovered.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarOptions">
            <summary>
            The options-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarConfig"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarOptions.Scales">
            <summary>
            Gets or sets the scales for the <see cref="T:ChartJs.Blazor.Charts.ChartJsBarChart"/>.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarScales">
            <summary>
            Defines the scales for bar charts by holding the x and y axes.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarScales.XAxes">
            <summary>
            Gets or sets the axes on the x coordinate.
            <para>You can use any <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/> but there are extended axes in the <see cref="N:ChartJs.Blazor.ChartJS.BarChart.Axes"/> namespace which contain additional properties to customize the bar chart axes.</para>        
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarScales.YAxes">
            <summary>
            Gets or sets the axes on the y coordinate.
            <para>You can use any <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/> but there are extended axes in the <see cref="N:ChartJs.Blazor.ChartJS.BarChart.Axes"/> namespace which contain additional properties to customize the bar chart axes.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness">
            <summary>
            The bar thickness used to customize all bar axes (extended cartesian axes in <see cref="N:ChartJs.Blazor.ChartJS.BarChart.Axes"/>).
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#barthickness </para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarThickness.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness" /> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String" /> value to set.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarThickness.#ctor(System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness" /> class.
            </summary>
            <param name="doubleValue">The <see cref="T:System.Double" /> value to set.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Absolute(System.Double)">
            <summary>
            Gets a <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness"/> from a <see cref="T:System.Double"/> value (in pixels).
            </summary>
            <param name="thickness">The thickness value in pixels.</param>
            <returns>A <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness"/> from a <see cref="T:System.Double"/> value (in pixels).</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.BarChart.BarThickness.op_Implicit(System.Double)~ChartJs.Blazor.ChartJS.BarChart.BarThickness">
            <summary>
            Converts a <see cref="T:System.Double"/> value to a <see cref="T:ChartJs.Blazor.ChartJS.BarChart.BarThickness"/> value.
            </summary>
            <param name="thickness">The thickness value in pixels.</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex">
            <summary>
            If set to <see cref="P:ChartJs.Blazor.ChartJS.BarChart.BarThickness.Flex"/>, the base sample widths are calculated automatically 
            based on the previous and following samples so that they take the full available widths without overlap.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataPoint.r">
            <summary>
            Bubble radius, in pixels, not scaled
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.BackgroundColor">
            <summary>
            rgba(0,0,0,0.1)'.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.BorderColor">
            <summary>
            rgba(0,0,0,0.1)'.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.BorderWidth">
            <summary>
            Default 3
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.HoverBackgroundColor">
            <summary>
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.HoverBorderColor">
            <summary>
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.Label">
            <summary>
            Defines the text associated to the dataset and which appears in the legend and tooltips.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.BubbleChart.BubbleDataset.PointStyle">
            <summary>
            Gets or sets the point style.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.ChartJsInterop">
            <summary>
            Interop layer with the included/referenced ChartJs
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.ChartJsInterop.SetupChart(Microsoft.JSInterop.IJSRuntime,ChartJs.Blazor.ChartJS.Common.ConfigBase)">
            <summary>
            Set up a new chart. Call only once.
            </summary>
            <param name="jsRuntime"></param>
            <param name="chartConfig"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.ChartJsInterop.ConvertExpandoObjectToDictionary(System.Dynamic.ExpandoObject)">
            <summary>
            This method is specifically used to convert an <see cref="T:System.Dynamic.ExpandoObject"/> with a Tree structure to a <see cref="!:Dictionary&lt;string, object&gt;"/>.
            </summary>
            <param name="expando">The <see cref="T:System.Dynamic.ExpandoObject"/> to convert</param>
            <returns>The fully converted <see cref="T:System.Dynamic.ExpandoObject"/></returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.ChartJsInterop.RecursivelyConvertIDictToDict(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This method takes an <see cref="!:IDictionary&lt;string, object&gt;"/> and recursively converts it to a <see cref="!:Dictionary&lt;string, object&gt;"/>.
            The idea is that every <see cref="!:IDictionary&lt;string, object&gt;"/> in the tree will be of type <see cref="!:Dictionary&lt;string, object&gt;"/> instead of some other implementation like <see cref="T:System.Dynamic.ExpandoObject"/>.
            </summary>
            <param name="value">The <see cref="!:IDictionary&lt;string, object&gt;"/> to convert</param>
            <returns>The fully converted <see cref="!:Dictionary&lt;string, object&gt;"/></returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.ChartJsInterop.UpdateChart(Microsoft.JSInterop.IJSRuntime,ChartJs.Blazor.ChartJS.Common.ConfigBase)">
            <summary>
            Update an existing chart. Make sure that the <see cref="P:ChartJs.Blazor.ChartJS.Common.ConfigBase.CanvasId"/> matches that on an existing chart.
            </summary>
            <param name="jsRuntime"></param>
            <param name="chartConfig"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.ChartJsInterop.StripNulls(ChartJs.Blazor.ChartJS.Common.ConfigBase)">
            <summary>
            Returns an object that is equivalent to the given parameter but without any null member AND it preserves DotNetInstanceClickHandler/DotNetInstanceHoverHandler members intact
            <para>Preserving DotNetInstanceClick/HoverHandler members is important because they contain DotNetObjectRefs to the instance whose method should be invoked on click/hover</para>
            <para>This whole method is hacky af but necessary. Stripping null members is only needed because the default config for the Line charts on the Blazor side is somehow messed up. If this were not the case no null member stripping were necessary and hence, the recovery of the DotNetObjectRef members would also not be needed. Nevertheless, The Show must go on!</para>
            </summary>
            <param name="chartConfig"></param>
            <returns></returns>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines">
            <summary>
            The angle lines sub-config of the linear-radial-axis-configuration (see <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis"/>).
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/linear.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines.Display">
            <summary>
            Gets or sets the value indicating whether the angle line is displayed or not.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines.Color">
            <summary>
            Gets or sets the color of the angled lines.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines.LineWidth">
            <summary>
            Gets or sets the width of the angled lines.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines.BorderDash">
            <summary>
            Gets or sets the length and spacing of dashes of the angled lines.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.AngleLines.BorderDashOffset">
            <summary>
            Gets or sets the offset for line dashes.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Axis">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/#common-configuration.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Axis.Display">
            <summary>
            Controls the axis global visibility (visible when <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.True"/>, hidden when <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.False"/>). 
            When display: <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.Auto"/>, the axis is visible only if at least one associated dataset is visible.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Axis.Weight">
            <summary>
            The weight used to sort the axis. Higher weights are further away from the chart area.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/#common-configuration
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.Type">
            <summary>
            The type of axis this instance represents.
            <para>For js-interop/serialization purposes so chart.js knows what axis to use.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.ID">
            <summary>
            The ID is used to link <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1"></see> and <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"></see> together. Referenced in <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.XAxisID"></see> and <seealso cref="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.YAxisID"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.Position">
            <summary>
            Position of the axis in the chart
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.Offset">
            <summary>
            If true, extra space is added to the both edges and the axis is scaled to fit into the chart area. 
            This is set to true for a category scale in a bar chart by default.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.ScaleLabel">
            <summary>
            Scale title configuration
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis.GridLines">
            <summary>
            Defines options for the grid lines that run perpendicular to the axis.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis`1">
            <summary>
            <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/> which contains the ticks-subconfig.
            </summary>
            <typeparam name="TTicks"></typeparam>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis`1.Ticks">
            <summary>
            Defines options for the tick marks that are generated by the axis.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.CategoryAxis">
            <summary>
            This axis is to be used when you want to display <see cref="T:System.String"/> values for an axis.
            <para>This axis has to be used when using/defining <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineData.Labels"/>, <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineData.XLabels"/> and/or <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineData.YLabels"/>.</para>
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/category.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.CategoryAxis.Type">
            <summary>
            The type of axis this instance represents.
            <para>For js-interop/serialization purposes so chart.js knows what axis to use.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis">
            <summary>
            The linear scale is use to chart numerical data. It can be placed on either the x or y axis. 
            As the name suggests, linear interpolation is used to determine where a value lies on the axis.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/linear.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis.Type">
            <summary>
            The type of axis this instance represents.
            <para>For js-interop/serialization purposes so chart.js knows what axis to use.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis">
            <summary>
            A linear radial axis.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis.AngleLines">
            <summary>
            Gets or sets the angle lines configuration.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#angle-line-options </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis.GridLines">
            <summary>
            Gets or sets the grid lines configuration.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/styling.html#grid-line-configuration </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis.PointLabels">
            <summary>
            Gets or sets the point labels configuration.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#point-label-options </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis.Ticks">
            <summary>
            Gets or sets the ticks configuration.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#tick-options </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.LogarithmicAxis">
            <summary>
            The logarithmic scale is use to chart numerical data. It can be placed on either the x or y axis. 
            As the name suggests, logarithmic interpolation is used to determine where a value lies on the axis.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/logarithmic.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.LogarithmicAxis.Type">
            <summary>
            The type of axis this instance represents.
            <para>For js-interop/serialization purposes so chart.js knows what axis to use.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.PointLabels">
            <summary>
            The point labels sub-config of the linear-radial-axis-configuration (see <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis"/>).
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#point-label-options </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.PointLabels.FontColor">
            <summary>
            Gets or sets the font color for a point label.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.PointLabels.FontSize">
            <summary>
            Gets or sets the font size in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.PointLabels.FontStyle">
            <summary>
            Gets or sets the font style to use when rendering a point label.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.PointLabels.LineHeight">
            <summary>
            Gets or sets the height of an individual line of text.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/CSS/line-height </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel">
            <summary>
            Defines options for how to display an axis title.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel"/>
            </summary>
            <param name="labelString">The initial value for <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.LabelString"/></param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.Display">
            <summary>
            If true, display the axis title.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.LabelString">
            <summary>
            Text for the title (i.e. "# of clicks")
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.FontColor">
            <summary>
            The font color of the label
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.ScaleLabel.FontSize">
            <summary>
            Font size for scale title.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks">
            <summary>
            The base class for all tick mark configurations of cartesian axes (see <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/>). Ticks-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/>.
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/#tick-configuration
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.Min">
            <summary>
            Gets or sets the user defined minimum number for the scale, overrides minimum value from data.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.Max">
            <summary>
            Gets or sets the user defined maximum number for the scale, overrides maximum value from data.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.SampleSize">
            <summary>
            The number of ticks to examine when deciding how many labels will fit.
            Setting a smaller value will be faster, but may be less accurate when there is large variability in label length.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.AutoSkip">
            <summary>
            If true, automatically calculates how many labels can be shown and hides labels accordingly. 
            Labels will be rotated up to maxRotation before skipping any. Turn <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.AutoSkip" /> off to show all labels no matter what.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.AutoSkipPadding">
            <summary>
            Gets or sets the padding between the ticks on the horizontal axis when <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.AutoSkip" /> is enabled.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.LabelOffset">
            <summary>
            Gets or sets the distance in pixels to offset the label from the centre point of the tick (in the x direction for the x axis, and the y direction for the y axis).
            <para>Note: this can cause labels at the edges to be cropped by the edge of the canvas.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.MaxRotation">
            <summary>
            Gets or sets the maximum rotation for tick labels when rotating to condense labels.
            <para>Note: Rotation doesn't occur until necessary.</para>
            <para>Note: Only applicable to horizontal scales.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.MinRotation">
            <summary>
            Gets or sets the minimum rotation for tick labels.
            <para>Note: Only applicable to horizontal scales.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks.Mirror">
            <summary>
            If true, flips tick labels around axis, displaying the labels inside the chart instead of outside.
            <para>Note: Only applicable to vertical scales.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks">
            <summary>
            The ticks-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CategoryAxis"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks.Labels">
            <summary>
            Gets or sets an array of labels to display.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks.Min">
            <summary>
            Gets or sets the minimum item to display. The item has to be present in <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks.Labels"/>.
            <para>Read more https://www.chartjs.org/docs/latest/axes/cartesian/category.html#min-max-configuration </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks.Max">
            <summary>
            Gets or sets the maximum item to display. The item has to be present in <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks.Labels"/>.
            <para>Read more https://www.chartjs.org/docs/latest/axes/cartesian/category.html#min-max-configuration </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks">
            <summary>
            The ticks-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis"/>.
            https://www.chartjs.org/docs/latest/axes/cartesian/linear.html#tick-configuration-options
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.BeginAtZero">
            <summary>
            If true, scale will include 0 if it is not already included.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.MaxTicksLimit">
            <summary>
            Gets or sets the maximum number of ticks and gridlines to show.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.Precision">
            <summary>
            If defined and <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.StepSize"/> is not specified, the step size will be rounded to this many decimal places.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.StepSize">
            <summary>
            Gets or sets the user defined fixed step size for the scale.
            <para>See https://www.chartjs.org/docs/latest/axes/cartesian/linear.html#step-size for details</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.SuggestedMax">
            <summary>
            Gets or sets the adjustment used when calculating the maximum data value.
            This value is used as the highest value if it's higher than the maximum data-value.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks.SuggestedMin">
            <summary>
            Gets or sets the adjustment used when calculating the minimum data value.
            This value is used as the lowest value if it's lower than the minimum data-value.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks">
            <summary>
            The ticks sub-config of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LinearRadialAxis"/>.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#point-label-options </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.BackdropColor">
            <summary>
            Gets or sets the color of the label backdrops.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.BackdropPaddingX">
            <summary>
            Gets or sets the horizontal padding of label backdrop.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.BackdropPaddingY">
            <summary>
            Gets or sets the vertical padding of label backdrop.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.BeginAtZero">
            <summary>
            Gets or sets the value indicating whether the scale will include 0 if it is not already included.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.Min">
            <summary>
            Gets or sets the user defined minimum number for the scale, overrides minimum value from data.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#axis-range-settings </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.Max">
            <summary>
            Gets or sets the user defined maximum number for the scale, overrides minimum value from data.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#axis-range-settings </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.MaxTicksLimit">
            <summary>
            Gets or sets the maximum number of ticks and gridlines to show.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.Precision">
            <summary>
            If defined and <see cref="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.StepSize"/> is not specified, the step size will be rounded to this many decimal places.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.StepSize">
            <summary>
            Gets or sets the user defined fixed step size for the scale.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#axis-range-settings </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.SuggestedMax">
            <summary>
            Gets or sets the adjustment used when calculating the maximum data value.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#axis-range-settings </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.SuggestedMin">
            <summary>
            Gets or sets the adjustment used when calculating the minimum data value.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/radial/linear.html#axis-range-settings </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearRadialTicks.ShowLabelBackdrop">
            <summary>
            Gets or sets the value indicating whether a background is drawn behind the tick labels.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LogarithmicTicks">
            <summary>
            The ticks-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.LogarithmicAxis"/>. It has the same members as <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CartesianTicks"/>.
            https://www.chartjs.org/docs/latest/axes/cartesian/logarithmic.html#tick-configuration-options
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.MajorTicks">
            <summary>
            The major ticks sub-config of the tick-configuration (see <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks"/>).
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/styling.html#major-tick-configuration </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.MajorTicks.Enabled">
            <summary>
            Gets or sets the value indicating whether these options are used to show major ticks.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.MinorTicks">
            <summary>
            The minor ticks sub-config of the tick-configuration (see <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks"/>).
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/styling.html#minor-tick-configuration </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks">
            <summary>
            The ultimate base class for tick mark configurations.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks.FontColor">
            <summary>
            Gets or sets the font color for a tick's label.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks.FontFamily">
            <summary>
            Gets or sets the font family for a tick's label.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks.FontSize">
            <summary>
            Gets or sets the font size for a tick's label.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks.FontStyle">
            <summary>
            Gets or sets the font style for a tick's label.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.SubTicks.LineHeight">
            <summary>
            Gets or sets the height of an individual line of text.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/CSS/line-height </para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks">
            <summary>
            The base class for all tick mark configurations. Ticks-subconfig of the common <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.Axis"/>.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/styling.html#tick-configuration </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Display">
            <summary>
            Gets or sets the value indicating whether this axis displays tick marks.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Reverse">
            <summary>
            Gets or sets the value indicating whether the order of the tick labels is reversed.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Minor">
            <summary>
            Gets or sets the minor ticks configuration. Omitted options are inherited.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Major">
            <summary>
            Gets or sets the major ticks configuration. Omitted options are inherited.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Padding">
            <summary>
            Gets or sets the offset of the tick labels from the axis. When set on a vertical axis, this applies in the horizontal (X) direction.
            When set on a horizontal axis, this applies in the vertical (Y) direction.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.Ticks.Z">
            <summary>
            Gets or sets the Z-index of the tick layer. Useful when ticks are drawn on chart area. Values &lt;= 0 are drawn under datasets, &gt; 0 on top.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.TimeTicks">
            <summary>
            The ticks-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.Ticks.TimeTicks.Source">
            <summary>
            Gets or sets how ticks are generated.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis">
            <summary>
            The time scale is used to display times and dates. 
            When building its ticks, it will automatically calculate the most comfortable unit base on the size of the scale.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis.Type">
            <summary>
            The type of axis this instance represents.
            <para>For js-interop/serialization purposes so chart.js knows what axis to use.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis.Distribution">
            <summary>
            The distribution property controls the data distribution along the scale
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis.Bounds">
            <summary>
            The bounds property controls the scale boundary strategy (bypassed by min/max time options).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis.Time">
            <summary>
            Configuration for time related stuff
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions">
            <summary>
            The base config for the options-subconfig of a chart
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.Title">
            <summary>
            Represents the title of this chart
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.Responsive">
            <summary>
            Resizes the chart canvas when its container does.
            <para>See important note: https://www.chartjs.org/docs/latest/general/responsive.html#important-note </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.AspectRatio">
            <summary>
            Canvas aspect ratio (i.e. width / height, a value of 1 representing a square canvas). 
            <para>Note that this option is ignored if the height is explicitly defined either as attribute (of the canvas) or via the style.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.MaintainAspectRatio">
            <summary>
            Maintain the original canvas aspect ratio (width / height) when resizing.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.ResponsiveAnimationDuration">
            <summary>
            Duration in milliseconds it takes to animate to new size after a resize event.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.Legend">
            <summary>
            The legend for this chart
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions.Tooltips">
            <summary>
            Gets or sets the tooltip options for this chart.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.ConfigBase">
            <summary>
            Base class for chart-configs
            <para>Contains the most basic required information about a chart</para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.ConfigBase.#ctor(ChartJs.Blazor.ChartJS.Common.Enums.ChartType)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.ConfigBase"/>
            </summary>
            <param name="chartType">The chartType this config is for</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.ConfigBase.Type">
            <summary>
            Defines what type of chart this config is for
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.ConfigBase.CanvasId">
            <summary>
            The id for the html canvas element associated with this chart
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.ConfigBase`2">
            <summary>
            Base class for chart-config which contains the options and the data sub-configs
            </summary>
            <typeparam name="TOptions">The type of the options-subconfig</typeparam>
            <typeparam name="TData">The type of the data-subconfig</typeparam>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.ConfigBase`2.#ctor(ChartJs.Blazor.ChartJS.Common.Enums.ChartType)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.ConfigBase"/>
            </summary>
            <param name="chartType">The chartType this config is for</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.ConfigBase`2.Options">
            <summary>
            The options subconfig for this chart
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.ConfigBase`2.Data">
            <summary>
            The data subconfig for this chart
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/#common-configuration
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.False">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.True">
            <summary>
            Visible
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisDisplay.Auto">
            <summary>
            Visible only if at least one associated dataset is visible
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.AxisType">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Linear">
            <summary>
            The linear scale is use to chart numerical data. 
            As the name suggests, linear interpolation is used to determine where a value lies on the axis.
            <para>Can be used both for Radial and for Cartesian Axes</para>
            <para>For cartesian: It can be placed on either the x or y axis. 
            The scatter chart type automatically configures a line chart to use one of these scales for the x axis. </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Logarithmic">
            <summary>
            The logarithmic scale is use to chart numerical data. It can be placed on either the x or y axis. 
            As the name suggests, logarithmic interpolation is used to determine where a value lies on the axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Category">
            <summary>
            If global configuration is used, labels are drawn from one of the label arrays included in the chart data. 
            If only data.labels is defined, this will be used. If data.xLabels is defined and the axis is horizontal, this will be used. 
            Similarly, if data.yLabels is defined and the axis is vertical, this property will be used.
            Using both xLabels and yLabels together can create a chart that uses strings for both the X and Y axes. 
            Specifying any of the settings above defines the x axis as type: <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Category" /> if not defined otherwise.
            For more fine-grained control of category labels it is also possible to add labels as part of the category axis definition.
            Doing so does not apply the global defaults.
            <para>See https://www.chartjs.org/docs/latest/axes/cartesian/category.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Time">
            <summary>
            The time scale is used to display times and dates. 
            When building its ticks, it will automatically calculate the most comfortable unit base on the size of the scale.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign">
            <summary>
            Specifies the border alignment of a <see cref="N:ChartJs.Blazor.ChartJS.PieChart"/> and a <see cref="N:ChartJs.Blazor.ChartJS.PolarAreaChart"/>.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/doughnut.html#border-alignment </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Center">
            <summary>
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Center" /> is set, the borders of arcs next to each other will overlap. The default value.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Inner">
            <summary>
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Inner" /> is set, it is guaranteed that all the borders will not overlap.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle">
            <summary>
            Specifies the border cap style.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle.Butt">
            <summary>
            The ends of lines are squared off at the endpoints.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle.Round">
            <summary>
            The ends of lines are rounded.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle.Square">
            <summary>
            The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderCapStyle"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle">
            <summary>
            Specifies the border join style.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle.Bevel">
            <summary>
            Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle.Round">
            <summary>
            Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle.Miter">
            <summary>
            Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderJoinStyle"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped">
            <summary>
                This setting is used to avoid drawing the bar stroke at the base of the fill.
                In general, this does not need to be changed except when creating chart types that derive from a bar chart.
                Note: For negative bars in vertical chart, top and bottom are flipped. Same goes for left and right in horizontal
                chart.
                <para>As per documentation here https://www.chartjs.org/docs/latest/charts/bar.html#borderskipped</para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped" /> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String" /> value to set.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.#ctor(System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped" /> class.
            </summary>
            <param name="boolValue">The <see cref="T:System.Boolean" /> value to set.</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.Bottom">
            <summary>
                The bottom border skipped style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.False">
            <summary>
                The false border skipped style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.Left">
            <summary>
                The left border skipped style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.Right">
            <summary>
                The right border skipped style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderSkipped.Top">
            <summary>
                The top border skipped style.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.ChartType">
            <summary>
            Defines the chart types.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Bar">
            <summary>
            The bar chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.HorizontalBar">
            <summary>
            The horizontal bar chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Line">
            <summary>
            The line chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Pie">
            <summary>
            The pie chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Doughnut">
            <summary>
            The doughnut chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Radar">
            <summary>
            The radar chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Bubble">
            <summary>
            The bubble chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.PolarArea">
            <summary>
            The polar area chart type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Scatter">
            <summary>
            The scatter chart type.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.ChartType"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode">
            <summary>
            Specifies the cubic interpolation mode.
            <para>As per documentation here https://www.chartjs.org/docs/latest/charts/line.html#cubicinterpolationmode </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode.Default">
            <summary>
            The default cubic interpolation mode.
            The <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode.Default" /> algorithm uses a custom weighted cubic interpolation, which produces pleasant curves for all types of datasets.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode.Monotone">
            <summary>
            The monotone cubic interpolation mode.
            The <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode.Monotone" /> algorithm is more suited to y = f(x) datasets:
            It preserves monotonicity (or piecewise monotonicity) of the dataset being interpolated, and ensures local extrema (if any) stay at input data points.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.CubicInterpolationMode"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle">
            <summary>
            Specifies the css font style of text.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/CSS/font-style </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.Normal">
            <summary>
            Specifies a font that is classified as normal within a font-family.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.Italic">
            <summary>
            Specifies a font that is classified as italic. If no italic version of the face is available, one classified as oblique is used instead. If neither is available, the style is artificially simulated.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.Oblique">
            <summary>
            Specifies a font that is classified as oblique. If no oblique version of the face is available, one classified as italic is used instead. If neither is available, the style is artificially simulated.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.Initial">
            <summary>
            Specifies a font with its font style set to its default value.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.Inherit">
            <summary>
            Specifies a font that inherits the font style from its parent element.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.FontStyle"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/general/interactions/modes.html
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.Point">
            <summary>
            Finds all of the items that intersect the point.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.Nearest">
            <summary>
            Gets the items that are at the nearest distance to the point. 
            The nearest item is determined based on the distance to the center of the chart item (point, bar). 
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.Index">
            <summary>
            Finds item at the same index.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.Dataset">
            <summary>
            Finds items in the same dataset.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.X">
            <summary>
            Returns all items that would intersect based on the X coordinate of the position only. 
            Would be useful for a vertical cursor implementation. 
            <para>Note that this only applies to cartesian charts.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.InteractionMode.Y">
            <summary>
            Returns all items that would intersect based on the Y coordinate of the position. This would be useful for a horizontal cursor implementation
            <para>Note that this only applies to cartesian charts.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.JsonConverter.JsonObjectEnumConverter">
            <summary>
            JsonConverter for converting and writing an ObjectEnum value. This JsonConverter can only write.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.JsonConverter.JsonStringEnumConverter">
            <summary>
            JsonConverter for converting and writing a StringEnum value. This JsonConverter can only write.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum">
            <summary>
            Inherit this class if you are in need of a pseudo-Enum which can hold values of different kinds (eg. string, double and bool).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.Value">
            <summary>
            Holds the actual value represented by this instance.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.#ctor(System.Object)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum"/> with a value.
            </summary>
            <param name="value">The value this enum-instance is supposed to represent.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.ToString">
            <summary>
            Returns the string representation of the underlying object. Calls <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.Value"/>.ToString().
            </summary>
            <returns>The string representation of the underlying object.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.Equals(System.Object)">
            <summary>
            Determines whether the specified object instance is considered equal to the current instance.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are considered equal; otherwise, false.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.ObjectEnum.GetHashCode">
            <summary>
            Returns the hash of the underlying object.
            </summary>
            <returns>The hash of the underlying object.</returns>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle">
            <summary>
            Specifies how a data-point on the chart will be styled.
            <para>As per documentation here https://www.chartjs.org/docs/latest/configuration/elements.html#point-styles </para>
            <para>Some samples showcasing the different styles can be found here https://www.chartjs.org/samples/latest/charts/line/point-styles.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Circle">
            <summary>
            The circle point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Cross">
            <summary>
            The cross point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.CrossRot">
            <summary>
            The rotated (45°) cross point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Dash">
            <summary>
            The dash point style.
            <para>Unlike <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Line"/>, this style only displayes a dash on the right side of the point.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Line">
            <summary>
            The line point style.
            <para>Unlike <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Dash"/>, this style displayes a dash on both the right and the left side of the point.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Rect">
            <summary>
            The rectangle point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.RectRounded">
            <summary>
            The rounded rectangle point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.RectRot">
            <summary>
            The rotated (45°) rectangle point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Star">
            <summary>
            The star point style.
            <para>Same as <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Cross"/> and <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.CrossRot"/> overlapping.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.Triangle">
            <summary>
            The triangle point style.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.PointStyle"/> class.
            </summary>
            <param name="stringValue">The <see cref="T:System.String"/> value to set.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.Position">
            <summary>
            Represents a relative direction or position on a 2D canvas.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.ScaleBound">
            <summary>
            Specifies the scale boundary strategy.
            <para>As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html#scale-bounds </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ScaleBound.Data">
            <summary>
            Makes sure data are fully visible, labels outside are removed.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.ScaleBound.Ticks">
            <summary>
            Makes sure ticks are fully visible, data outside are truncated.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/charts/line.html#stepped-line
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.False">
            <summary>
            No Step Interpolation (default)
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.True">
            <summary>
            Step-before Interpolation (same as <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.Before"></see>)
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.Before">
            <summary>
            Step-before Interpolation
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.After">
            <summary>
            Step-after Interpolation
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.Middle">
            <summary>
            Step-middle Interpolation
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.TickSource">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html#ticks-source
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TickSource.Auto">
            <summary>
            Generates "optimal" ticks based on scale size and time options.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TickSource.Data">
            <summary>
            Generates ticks from data (including labels from data {t|x|y} objects).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TickSource.Labels">
            <summary>
            Generates ticks from user given <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineData.Labels"/> values ONLY.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.TimeDistribution">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html#scale-distribution
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TimeDistribution.Linear">
            <summary>
            Data are spread according to their time (distances can vary)
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TimeDistribution.Series">
            <summary>
            Data are spread at the same distance from each other
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.TimeMeasurement">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html#time-units
            </summary>
            
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Enums.TooltipPosition">
            <summary>
            Specifies where the tooltip will be displayed.
            <para>As per documentation here https://www.chartjs.org/docs/latest/configuration/tooltip.html#position-modes </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TooltipPosition.Average">
            <summary>
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.TooltipPosition.Average" /> is set, the tooltip will be placed at the average position of the items displayed in the tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Enums.TooltipPosition.Nearest">
            <summary>
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.TooltipPosition.Nearest" /> is set, the tooltip will be placed at the position of the element closest to the event position.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.GridLines">
            <summary>
            The grid lines sub-config of the axis-configuration (see <see cref="!:Axis"/>).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.Display">
            <summary>
            If false, do not display grid lines for this axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.Circular">
            <summary>
            If true, gridlines are circular (on radar chart only).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.Color">
            <summary>
            The color of the grid lines. If specified as an array, the first color applies to the first grid line, the second to the second grid line and so on.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            <para>Type has to be <c>string</c> or <c>string[]</c></para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.BorderDash">
            <summary>
            Length and spacing of dashes on grid lines
            <para>See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash for patterns and details</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.LineWidth">
            <summary>
            Stroke width of grid lines.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.DrawBorder">
            <summary>
            If true, draw border at the edge between the axis and the chart area.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.DrawOnChartArea">
            <summary>
            If true, draw lines on the chart area inside the axis lines. This is useful when there are multiple axes and you need to control which grid lines are drawn.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.DrawTicks">
            <summary>
            If true, draw lines beside the ticks in the axis area beside the chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.TickMarkLength">
            <summary>
            Length in pixels that the grid lines will draw into the axis area.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.ZeroLineWidth">
            <summary>
            Stroke width of the grid line for the first index (index 0).
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.ZeroLineColor">
            <summary>
            Stroke color of the grid line for the first index (index 0).
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.ZeroLineBorderDash">
            <summary>
            Length and spacing of dashes of the grid line for the first index (index 0). 
            <para>See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash for details</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.ZeroLineBorderDashOffset">
            <summary>
            Offset for line dashes of the grid line for the first index (index 0).
            <para>See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset for details</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.GridLines.OffsetGridLines">
            <summary>
            If true, grid lines will be shifted to be between labels. This is set to true for a category scale in a bar chart by default.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration">
            <summary>
            The legend label configuration is nested below the legend configuration
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.BoxWidth">
            <summary>
            width of colored box
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.FontSize">
            <summary>
            Font size of text
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.FontStyle">
            <summary>
            Gets or sets the font style for the labels text.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.FontColor">
            <summary>
            Color of text.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.Padding">
            <summary>
            Padding between rows of colored boxes.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.GenerateLabels">
            <summary>
            Generates legend items for each thing in the legend. Default implementation returns the text + styling for the color box. See Legend Item for details.
            <para> See Legend Item: http://www.chartjs.org/docs/latest/configuration/legend.html#legend-item-interface </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.Filter">
            <summary>
            Filters legend items out of the legend. Receives 2 parameters, a Legend Item and the chart data.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.UsePointStyle">
            <summary>
            Label style will match corresponding point style (size is based on <see cref="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.FontSize"/>, <see cref="P:ChartJs.Blazor.ChartJS.Common.Handlers.LegendLabelConfiguration.BoxWidth"/> is not used in this case).
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.Legend">
            <summary>
            The chart legend displays data about the datasets that are appearing on the chart.
            <para>Link: http://www.chartjs.org/docs/latest/configuration/legend.html </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.Display">
            <summary>
            Determines if the legend is displayed
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.Position">
            <summary>
            Position of the legend
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.FullWidth">
            <summary>
            Marks that this box should take the full width of the canvas (pushing down other boxes). This is unlikely to need to be changed in day-to-day use.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.OnClick">
            <summary>
            The callback that is called when a click event is registered on a label item.
            <para>See <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler"></see>, <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler"></see> and <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.JsClickHandler"></see></para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.OnHover">
            <summary>
            The callback that is called when a 'mousemove' event is registered on top of a label item
            <para>See <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler"></see>, <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler"></see> and <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.JsHoverHandler"></see></para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.Reverse">
            <summary>
            Legend will show datasets in reverse order.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.Legend.Labels">
            <summary>
            Configuration options for the legend-labels
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler">
            <summary>
            Specifies a .net instance method that should be called when clicking on a Legend item.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler.InstanceClickHandler">
            <summary>
            The delegate for a click handler.
            <para>Helps enforcing the signature of the legend item click handler</para>
            </summary>
            <param name="sender">The sender of the click event</param>
            <param name="args">Click event args</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler.InstanceRef">
            <summary>
            The <see cref="T:Microsoft.JSInterop.DotNetObjectReference"/> for the instance the delegate will be executed on.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler.MethodName">
            <summary>
            The name of the method behind the delegate
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler.#ctor(ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetInstanceClickHandler.InstanceClickHandler)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler"/>
            </summary>
            <param name="clickHandler">The delegate for a click handler.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler">
            <summary>
            Specifies a static .net method that should be called when clicking
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler.StaticClickHandler">
            <summary>
            The delegate for a click handler.
            <para>Helps enforcing the signature of the legend item click handler</para>
            </summary>
            <param name="sender">The sender of the click event</param>
            <param name="args">Click event args</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler.AssemblyName">
            <summary>
            The name of the assembly the method is located in
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler.MethodName">
            <summary>
            The name of the method behind the delegate
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler.#ctor(ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler.StaticClickHandler)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.DotNetStaticClickHandler"/>
            </summary>
            <param name="clickHandler">The delegate for a click handler</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.IClickHandler">
            <summary>
            Specifies how clicking items is handled
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.JsClickHandler">
            <summary>
            Specified the namespace and name of a Javascript function that should be invoked when clicking
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.JsClickHandler.FullFunctionName">
            <summary>
            The namespace and name of a Javascript function to be called when clicking on a Legend item.
            <para>E.g. "SampleFunctions.HideOtherDatasetsFunc"</para>
            <para>Note 1: You must create this function in your JS file in wwwroot and reference it in _Host.cshtml</para>
            <para>Note 2: Make sure the function can handle the click sender and the click event args</para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.JsClickHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnClickHandler.JsClickHandler"/>
            </summary>
            <param name="fullFunctionName">The namespace and name of a Javascript function to be called when clicking on a Legend item.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler">
            <summary>
            Specifies a .net instance method that should be called when hovering on an item.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler.InstanceRef">
            <summary>
            The <see cref="T:Microsoft.JSInterop.DotNetObjectReference"/> for the instance the delegate will be executed on.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler.MethodName">
            <summary>
            The name of the method behind the delegate
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler.LegendItemOnHover">
            <summary>
            The delegate for a hover handler.
            <para>Helps enforcing the signature of the legend item hover handler</para>
            </summary>
            <param name="sender">The sender of the hover event</param>
            <param name="mouseMove"></param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler.#ctor(ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler.LegendItemOnHover)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetInstanceHoverHandler"/>
            </summary>
            <param name="legendItemOnHoverHandler">The delegate for a hover handler</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler">
            <summary>
            Specifies a static .net method that should be called when hovering on an item.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler.AssemblyName">
            <summary>
            The name of the assembly the method is located in
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler.MethodName">
            <summary>
            The name of the method behind the delegate
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler.LegendItemOnHover">
            <summary>
            The delegate for a hover handler.
            <para>Helps enforcing the signature of the legend item hover handler</para>
            </summary>
            <param name="sender">The sender of the hover event</param>
            <param name="mouseMove"></param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler.#ctor(ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler.LegendItemOnHover)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.DotNetStaticHoverHandler"/>
            </summary>
            <param name="legendItemOnHoverHandler">The delegate for a hover handler.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.IHoverHandler">
            <summary>
            Specifies how hovering on items is handled
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.JsHoverHandler">
            <summary>
            Specified the namespace and name of a Javascript function that should be invoked when hovering
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.JsHoverHandler.FullFunctionName">
            <summary>
            The namespace and name of a Javascript function to be called when hovering the mouse cursor over a Legend item.
            <para>E.g. "SampleFunctions.ItemHoverHandler"</para>
            <para>Note 1: You must create this function in your JS file in wwwroot and reference it in index.html</para>
            <para>Note 2: Make sure the function can handle the 'mousemove' event</para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.JsHoverHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Handlers.OnHover.JsHoverHandler"/>
            </summary>
            <param name="fullFunctionName">The namespace and name of a Javascript function to be called when hovering on a Legend item.</param>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.IDataset">
            <summary>
            Dataset contract, enforcing the existence of the Id member
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ChartJs.Blazor.ChartJS.Common.IDataset.Id" -->
        <member name="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1">
            <summary>
            Represents an object that can be either a single value or an array of values. This is used for type safe js-interop.
            </summary>
            <typeparam name="T">The type of data this <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> is supposed to hold.</typeparam>
        </member>
        <member name="F:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.PropertyName">
            <summary>
            The compile-time name of the property which gets the wrapped value. This is used internally for serialization.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.IndexedValues">
            <summary>
            The indexed values represented by this instance.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.SingleValue">
            <summary>
            The single value represented by this instance.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.IsIndexed">
            <summary>
            Gets the value indicating whether the option wrapped in this <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> is indexed.
            <para>True if the wrapped value represents an array of <typeparamref name="T"/>, false if it represents a single value of <typeparamref name="T"/>.</para>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.#ctor(`0)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> which represents a single value.
            </summary>
            <param name="singleValue">The single value this <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> should represent.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.#ctor(`0[])">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> which represents an array of values.
            </summary>
            <param name="indexedValues">The array of values this <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> should represent.</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.op_Implicit(`0)~ChartJs.Blazor.ChartJS.Common.IndexableOption{`0}">
            <summary>
            Implicitly wraps a single value of <typeparamref name="T"/> to a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/>.
            </summary>
            <param name="singleValue">The single value to wrap</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.op_Implicit(`0[])~ChartJs.Blazor.ChartJS.Common.IndexableOption{`0}">
            <summary>
            Implicitly wraps an array of values of <typeparamref name="T"/> to a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/>.
            </summary>
            <param name="indexedValues">The array of values to wrap</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.Equals(ChartJs.Blazor.ChartJS.Common.IndexableOption{`0})">
            <summary>
            Determines whether the specified <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> instance is considered equal to the current instance.
            </summary>
            <param name="other">The <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> to compare with.</param>
            <returns>true if the objects are considered equal; otherwise, false.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object instance is considered equal to the current instance.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are considered equal; otherwise, false.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.GetHashCode">
            <summary>
            Returns the hash of the underlying object.
            </summary>
            <returns>The hash of the underlying object.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.op_Equality(ChartJs.Blazor.ChartJS.Common.IndexableOption{`0},ChartJs.Blazor.ChartJS.Common.IndexableOption{`0})">
            <summary>
            Determines whether two specified <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> instances contain the same value.
            </summary>
            <param name="a">The first <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> to compare</param>
            <param name="b">The second <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> to compare</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.IndexableOption`1.op_Inequality(ChartJs.Blazor.ChartJS.Common.IndexableOption{`0},ChartJs.Blazor.ChartJS.Common.IndexableOption{`0})">
            <summary>
            Determines whether two specified <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> instances contain different values.
            </summary>
            <param name="a">The first <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> to compare</param>
            <param name="b">The second <see cref="T:ChartJs.Blazor.ChartJS.Common.IndexableOption`1"/> to compare</param>
            <returns>true if the value of a is different from the value of b; otherwise, false.</returns>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Properties.Animation">
            <summary>
            Defines some animation configurations
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Animation.Duration">
            <summary>
            Defines the duration of the animation
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Properties.ArcAnimation">
            <summary>
            The animation-subconfig of the options for a radial chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.ArcAnimation.AnimateRotate">
            <summary>
            If true, the chart will animate in with a rotation animation.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.ArcAnimation.AnimateScale">
            <summary>
            If true, will animate scaling the chart from the center outwards.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle">
            <summary>
            The title-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.Common.BaseConfigOptions"/>. Specifies how the chart title is displayed.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.Display">
            <summary>
            Gets or sets a value indicating whether the title should be displayed or not.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.Position">
            <summary>
            Gets or sets the position of the title.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.FontSize">
            <summary>
            Gets or sets the font size for the title text.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.FontFamily">
            <summary>
            Gets or sets the font family for the title text.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.FontColor">
            <summary>
            Gets or sets the font color for the title text.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.FontStyle">
            <summary>
            Gets or sets the font style for the title text.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.Padding">
            <summary>
            Gets or sets the number of pixels to add above and below the title text.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.LineHeight">
            <summary>
            Gets or sets the height of an individual line of text.
            <para>As per documentation here https://developer.mozilla.org/en-US/docs/Web/CSS/line-height </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle.Text">
            <summary>
            Gets or sets the title text to display. If specified as an array, text is rendered on multiple lines.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips">
            <summary>
            The tooltips-subconfig of the common options (applies to all charts).
            <para>As per documentation here https://www.chartjs.org/docs/latest/configuration/tooltip.html#tooltip-configuration </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.Mode">
            <summary>
            Gets or sets which elements appear in the tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.Intersect">
            <summary>
            Gets or sets the value indicating if the hover mode only applies when the mouse position intersects an item on the chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.Enabled">
            <summary>
            Gets or sets the value indicating if the tooltips are enabled.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.Position">
            <summary>
            Gets or sets the mode for positioning the tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BackgroundColor">
            <summary>
            Gets or sets the background color of the tooltip.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleFontFamily">
            <summary>
            Gets or sets the title font.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleFontSize">
            <summary>
            Gets or sets the title font size.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleFontStyle">
            <summary>
            Gets or sets the title font style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleFontColor">
            <summary>
            Gets or sets the title font color.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleSpacing">
            <summary>
            Gets or sets the spacing to add to top and bottom of each title line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.TitleMarginBottom">
            <summary>
            Gets or sets the spacing to add to top and bottom of each title line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BodyFontFamily">
            <summary>
            Gets or sets the body line font.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BodyFontSize">
            <summary>
            Gets or sets the body font size.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BodyFontStyle">
            <summary>
            Gets or sets the body font style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BodyFontColor">
            <summary>
            Gets or sets the body font color.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BodySpacing">
            <summary>
            Gets or sets the spacing to add to top and bottom of each tooltip item.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterFontFamily">
            <summary>
            Gets or sets the footer font.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterFontSize">
            <summary>
            Gets or sets the footer font size.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterFontStyle">
            <summary>
            Gets or sets the footer font style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterFontColor">
            <summary>
            Gets or sets the footer font color.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterSpacing">
            <summary>
            Gets or sets the spacing to add to top and bottom of each footer line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.FooterMarginTop">
            <summary>
            Gets or sets the margin to add before drawing the footer.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.XPadding">
            <summary>
            Gets or sets the padding to add on left and right of tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.YPadding">
            <summary>
            Gets or sets the padding to add on top and bottom of tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.CaretPadding">
            <summary>
            Gets or sets the extra distance to move the end of the tooltip arrow away from the tooltip point.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.CaretSize">
            <summary>
            Gets or sets the size, in px, of the tooltip arrow.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.CornerRadius">
            <summary>
            Gets or sets the radius of tooltip corner curves.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.MultiKeyBackground">
            <summary>
            Gets or sets the color to draw behind the colored boxes when multiple items are in the tooltip.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.DisplayColors">
            <summary>
            Gets or sets the value indicating if color boxes are shown in the tooltip.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BorderColor">
            <summary>
            Gets or sets the color of the border.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Properties.Tooltips.BorderWidth">
            <summary>
            Gets or sets the size of the border.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Time.Moment">
            <summary>
            Wrapper class for <see cref="T:System.DateTime"></see> for serialization purposes.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.#ctor(System.DateTime)">
            <summary>
            Creates a new <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.Moment"/> which wraps the provided <see cref="T:System.DateTime"/>
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to wrap</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.op_Explicit(System.DateTime)~ChartJs.Blazor.ChartJS.Common.Time.Moment">
            <summary>
            Creates a new wrapper for the provided <see cref="T:System.DateTime"/>
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.op_Explicit(ChartJs.Blazor.ChartJS.Common.Time.Moment)~System.DateTime">
            <summary>
            Extracts the <see cref="T:System.DateTime"/> value wrapped in the provided instance
            </summary>
            <param name="moment"></param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.Equals(System.Object)">
            <summary>
            Returns the value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>true if the other object is a wrapper for the same <see cref="T:System.DateTime"/> value 
            or if it's the same <see cref="T:System.DateTime"/> value as wrapped in this instance.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.GetHashCode">
            <summary>
            Returns the HashCode for this instance.
            </summary>
            <returns>The HashCode for this instance</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.Moment.ToString">
            <summary>
            Converts the wrapped <see cref="T:System.DateTime"/> to a format which is readable for moment.js.
            </summary>
            <returns>The string representation of this instance</returns>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Time.TimeDisplayFormats">
            <summary>
            This is a helper class containing pre-made display formats to use in <see cref="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.DisplayFormats"/> for certain locales.
            <para>Those <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.TimeMeasurement"/>s that are not defined, will use the default format from https://www.chartjs.org/docs/latest/axes/cartesian/time.html#display-formats </para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeDisplayFormats.DE_CH">
            <summary>
            Pre-made format-string for the swiss (DE_CH) locale.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions">
            <summary>
            As per documentation here https://www.chartjs.org/docs/latest/axes/cartesian/time.html#configuration-options
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.DisplayFormats">
            <summary>
            Sets how different time units are displayed. See https://www.chartjs.org/docs/latest/axes/cartesian/time.html#data-sets for more details.
            <para>See <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.TimeDisplayFormats"/> for pre-made formats for certain locales.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.IsoWeek">
            <summary>
            If true and the <see cref="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.Unit"></see> is set to <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.TimeMeasurement.Week"></see>, then the first day of the week will be Monday. Otherwise, it will be Sunday.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.Max">
            <summary>
            If defined, this will override the data maximum.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.Min">
            <summary>
            If defined, this will override the data minimum.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.Round">
            <summary>
            If defined, dates will be rounded to the start of this unit.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.TooltipFormat">
            <summary>
            The Moment.js format string to use for the tooltip.
            <para>See https://momentjs.com/docs/#/displaying/format/ for possible formats</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.Unit">
            <summary>
            If defined, will force the unit to be a certain type.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.StepSize">
            <summary>
            The number of units between grid lines.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeOptions.MinUnit">
            <summary>
            The minimum display format to be used for a time unit.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1">
            <summary>
            Represents a point on a graph where the X-Value (<see cref="P:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1.Time"></see>) is represented by a <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.Moment"></see>
            <para>Should be used together with a <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.TimeAxis"></see></para>
            <para>Reference Type so it can be used in the covariant <see cref="T:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1"/></para>
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1.#ctor(ChartJs.Blazor.ChartJS.Common.Time.Moment,`0)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1"/>
            </summary>
            <param name="time">The <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.Moment"/> instance to represent the x-value.</param>
            <param name="yValue">The value of type <typeparamref name="TData"/> which represents the y-value.</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1.Time">
            <summary>
            The time-/x-value for this <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1.YValue">
            <summary>
            The y-value for this <see cref="T:ChartJs.Blazor.ChartJS.Common.Time.TimeTuple`1"/>.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.Common.Utils.ArgValidation">
            <summary>
            Validates arguments
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Utils.ArgValidation.AssertNotNullOrEmpty(System.String,System.Object)">
            <summary>
            Checks if the argument is null, or in case of strings, if it is empty or white space only.
            </summary>
            <param name="argName">The name or the argument to check</param>
            <param name="arg">The actual argument to check</param>
            <exception cref="T:System.ArgumentException">Thrown if the argument is an empty or whitespace-only string</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the argument is null</exception>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Utils.ArgValidation.AssertHasCustomAttribute(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Checks whether or not the provided <see cref="T:System.Reflection.MethodInfo"/> has the desired custom attribute
            </summary>
            <param name="methodInfo">The method info to check</param>
            <param name="attributeType">The desired custom attribute</param>
            <exception cref="T:System.ArgumentException">Thrown if the desired custom attribute was not found</exception>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Utils.ArgValidation.AssertIsPublic(System.Reflection.MethodInfo)">
            <summary>
            Checks whether or not the provided <see cref="T:System.Reflection.MethodInfo"/> represents a public method.
            </summary>
            <param name="methodInfo"></param>
            <exception cref="T:System.ArgumentException">Thrown if the method info is not for a public method</exception>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.Common.Utils.ArgValidation.AssertIsStatic(System.Reflection.MethodInfo)">
            <summary>
            Checks whether or not the provided <see cref="T:System.Reflection.MethodInfo"/> represents a static method.
            </summary>
            <param name="methodInfo"></param>
            <exception cref="T:System.ArgumentException">Thrown if the method info is not for a static method</exception>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.LineConfig">
            <summary>
            Config for a <see cref="T:ChartJs.Blazor.Charts.ChartJsLineChart"/>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.LineChart.LineConfig.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineConfig"/>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.LineData">
            <summary>
            The data-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineConfig"/>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.LineChart.LineData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineData"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineData.Labels">
            <summary>
            The labels the chart will use. 
            <para>If defined (not null) the x-Axis has to be of type <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Category"/> for the chart to work correctly.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineData.XLabels">
            <summary>
            The labels the horizontal Axes will use. 
            <para>If defined (not null) the x-Axis has to be of type <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Category"/> for the chart to work correctly.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineData.YLabels">
            <summary>
            The labels the vertical Axes will use. 
            <para>If defined (not null) the y-Axis has to be of type <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.AxisType.Category"/> for the chart to work correctly.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineData.Datasets">
            <summary>
            The Datasets displayed in this chart.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1">
            <summary>
            A dataset for a <see cref="T:ChartJs.Blazor.Charts.ChartJsLineChart"/>
            </summary>
            <typeparam name="TData">Defines the type of data in this dataset. Use Wrappers from <see cref="N:ChartJs.Blazor.ChartJS.Common.Wrappers"/> for value types.</typeparam>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1"/> with some data
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.Type">
            <summary>
            The type of chart this dataset is for.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.Label">
            <summary>
            The label for the dataset which appears in the legend and tooltips.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.XAxisID">
            <summary>
            The ID of the x axis to plot this dataset on. If not specified, this defaults to the ID of the first found x axis
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.YAxisID">
            <summary>
            The ID of the y axis to plot this dataset on. If not specified, this defaults to the ID of the first found y axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderWidth">
            <summary>
            The width of the line in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderCapStyle">
            <summary>
            Gets or sets the cap style of the line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderJoinStyle">
            <summary>
            Gets or sets the line join style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.CubicInterpolationMode">
            <summary>
            Gets or sets the algorithm used to interpolate a smooth curve from the discrete data points.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderDash">
            <summary>
            Length and spacing of dashes. It's an int array. Whatever JS!
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderDashOffset">
            <summary>
            Offset for line dashes.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointBorderWidth">
            <summary>
            The width of the point border in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointRadius">
            <summary>
            The radius of the point shape. If set to 0, the point is not rendered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointHitRadius">
            <summary>
            The pixel size of the non-displayed point that reacts to mouse events.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointHoverBorderWidth">
            <summary>
            Border width of point when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointHoverRadius">
            <summary>
            The radius of the point when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.Fill">
            <summary>
            How to fill the area under the line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.LineTension">
            <summary>
            Bezier curve tension of the line. Set to 0 to draw straight lines. This option is ignored if monotone cubic interpolation is used.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.ShowLine">
            <summary>
            If false, the line is not drawn for this dataset.
            Default is true. If you are filling and don't want to show the line, then change to false.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.SpanGaps">
            <summary>
            If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.SteppedLine">
            <summary>
            If the line is shown as a stepped line. Use <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine"></see> for available options.
            <para>If the steppedLine value is set to anything other than <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.False"></see>, <see cref="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.LineTension"></see> will be ignored.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BackgroundColor">
            <summary>
            The fill color under the line.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.PointBackgroundColor">
            <summary>
            The fill color of a point.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineDataset`1.BorderColor">
            <summary>
            The color of the line. 
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.LineOptions">
            <summary>
            The options-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineConfig"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptions.Animation">
            <summary>
            General animation time
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptions.Hover">
            <summary>
            Hover options for hovering over an item
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptions.Scales">
            <summary>
            The scales for this chart. You can use any <see cref="T:ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis"/> for x and y.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptions.ShowLines">
            <summary>
            If false, the lines between points are not drawn.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptions.SpanGaps">
            <summary>
            If false, NaN data causes a break in the line.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.LineOptionsHover">
            <summary>
            The hover-subconfig of <see cref="T:ChartJs.Blazor.ChartJS.LineChart.LineOptions"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.LineChart.LineOptionsHover.AnimationDuration">
            <summary>
            Duration in milliseconds it takes to animate hover style changes.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.LineChart.Scales">
            <summary>
            Defines the scales for cartesian charts by holding the x and y axes.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1">
            <summary>
            The base class for a dataset that implements the covariant <see cref="T:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1"/>
            </summary>
            <typeparam name="TData">Defines the type of data in this dataset. Use Wrappers from <see cref="N:ChartJs.Blazor.ChartJS.Common.Wrappers"/> for value types.</typeparam>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Type">
            <summary>
            The type of chart this dataset is for.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Add(`0)">
            <summary>
            Adds an element to the end of the <see cref="P:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Data"/>.
            </summary>
            <param name="data">Element to add</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="P:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Data"/>.
            </summary>
            <param name="data">A collection of elements to add</param>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1"></see>.</summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.List`1"></see>. The value can be null for reference types.</param>
            <returns>true if <paramref name="item">item</paramref> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item">item</paramref> was not found in the <see cref="T:System.Collections.Generic.List`1"></see>.</returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes all the elements that match the conditions defined by the specified predicate.</summary>
            <param name="match">The <see cref="T:System.Predicate`1"></see> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.List`1"></see> .</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match">match</paramref> is null.</exception>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1"></see>.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="index">index</paramref> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count"></see>.</exception>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.RemoveRange(System.Int32,System.Int32)">
            <summary>Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1"></see>.</summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index">index</paramref> is less than 0.   -or-  <paramref name="count">count</paramref> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index">index</paramref> and <paramref name="count">count</paramref> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1"></see>.</exception>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Data">
            <summary>
            The data contained in this dataset. Covariant through <see cref="T:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.MixedChart.BaseMixableDataset`1.Hidden">
            <summary>
            If true, this instance represents a hidden dataset. Label will be rendered with a strike-through effect at the start.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1">
            <summary>
            Interface for a covariant dataset that can be mixed with other datasets.
            </summary>
            <typeparam name="TData">Defines the type of data in this dataset. Use Wrappers from <see cref="N:ChartJs.Blazor.ChartJS.Common.Wrappers"/> for value types.</typeparam>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1.Type">
            <summary>
            The type of chart this dataset is for.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.MixedChart.IMixableDataset`1.Data">
            <summary>
            The data contained in this dataset (readonly because covariant).
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.MomentJsInterop">
            <summary>
            Interop layer with the included/referenced moment.js
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MomentJsInterop.GetAvailableLocales(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Gets the available locales
            </summary>
            <param name="jsRuntime"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.MomentJsInterop.ChangeLocale(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            Changes the current locale to the provided one
            </summary>
            <param name="jsRuntime"></param>
            <param name="locale"></param>
            <returns></returns>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PieChart.PieConfig">
            <summary>
            Config for a <see cref="T:ChartJs.Blazor.ChartJS.PieChart.PieConfig"/>.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.PieChart.PieConfig.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.PieChart.PieConfig"/>.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PieChart.PieData">
            <summary>
            The data-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.PieChart.PieConfig"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieData.Labels">
            <summary>
            Gets the labels the chart will use.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieData.Datasets">
            <summary>
            Gets the datasets displayed in this chart.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PieChart.PieDataset">
            <summary>
            A dataset for a <see cref="T:ChartJs.Blazor.Charts.ChartJsPieChart"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.Type">
            <summary>
            Gets or sets the chart type. <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.Pie"/> in this case. This is needed for mixed datasets only.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.BackgroundColor">
            <summary>
            Gets or sets the fill color of the arcs in the dataset.
            This property should be indexed, otherwise you can't distinguish the different arcs.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.BorderAlign">
            <summary>
            Gets or sets the border align. When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Center" /> is set, the borders of arcs next to each other will overlap.
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Inner" /> is set, it is guaranteed that all the borders are not overlap.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.BorderColor">
            <summary>
            Gets or sets the border color of the arcs in the dataset.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.BorderWidth">
            <summary>
            Gets or sets the border width of the arcs in the dataset.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.HoverBackgroundColor">
            <summary>
            Gets or sets the fill colour of the arcs when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.HoverBorderColor">
            <summary>
            Gets or sets the stroke colour of the arcs when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.HoverBorderWidth">
            <summary>
            Gets or sets the stroke width of the arcs when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.Weight">
            <summary>
            Gets or sets the relative thickness of the dataset.
            Providing a value for weight will cause the pie dataset to be drawn with a thickness relative to the sum of all the dataset weight values.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieDataset.Data">
            <summary>
            Gets the data in the dataset.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PieChart.PieOptions">
            <summary>
            The options-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.PieChart.PieConfig"/>.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.PieChart.PieOptions.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.PieChart.PieOptions"/>
            </summary>
            <param name="doughnutCutout">If true, the start-value for <see cref="P:ChartJs.Blazor.ChartJS.PieChart.PieOptions.CutoutPercentage"/> will be 50 (default for Doughnut) instead of 0 (default for Pie).</param>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieOptions.CutoutPercentage">
            <summary>
            Gets or sets the percentage of the chart that is cut out of the middle.
            <para>Default for Pie is 0, Default for Doughnut is 50. See constructor-parameter.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieOptions.Animation">
            <summary>
            Gets or sets the animation-configuration for this chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieOptions.Rotation">
            <summary>
            Gets or sets the starting angle to draw arcs from.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PieChart.PieOptions.Circumference">
            <summary>
            Gets or sets the sweep to allow arcs to cover.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaConfig">
            <summary>
            Config for a <see cref="T:ChartJs.Blazor.Charts.ChartJsPolarAreaChart"/>
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaConfig.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaConfig"/>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaData">
            <summary>
            The data-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaConfig"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaData.Labels">
            <summary>
            Gets the labels the chart will use.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaData.Datasets">
            <summary>
            Gets the datasets displayed in this chart.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset">
            <summary>
            A dataset for a <see cref="T:ChartJs.Blazor.Charts.ChartJsPolarAreaChart"/>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.Type">
            <summary>
            Gets the chart type. <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.ChartType.PolarArea"/> in this case. This is needed for mixed datasets only.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.BackgroundColor">
            <summary>
            Gets or sets the fill color of the arcs in the dataset.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.BorderAlign">
            <summary>
            Gets or sets the border align. When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Center" /> is set, the borders of arcs next to each other will overlap.
            When <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.BorderAlign.Inner" /> is set, it is guaranteed that all the borders are not overlap.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.BorderColor">
            <summary>
            Gets or sets the border color of the arcs in the dataset.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.BorderWidth">
            <summary>
            Gets or sets the border width of the arcs in the dataset.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.HoverBackgroundColor">
            <summary>
            Gets or sets the fill colour of the arcs when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.HoverBorderColor">
            <summary>
            Gets or sets the stroke colour of the arcs when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.HoverBorderWidth">
            <summary>
            Gets or sets the stroke width of the arcs when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaDataset.Data">
            <summary>
            Gets the data in the dataset.
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaOptions">
            <summary>
            The options-subconfig of a <see cref="T:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaConfig"/>.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaOptions.StartAngle">
            <summary>
            Gets or sets the starting angle to draw arcs for the first item in a dataset.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaOptions.Animation">
            <summary>
            Gets or sets the animation-configuration for this chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.PolarAreaChart.PolarAreaOptions.Scale">
            <summary>
            The scale (axis) for this chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.Label">
            <summary>
            The label for the dataset which appears in the legend and tooltips.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BackgroundColor">
            <summary>
            The fill color under the line.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BorderColor">
            <summary>
            The color of the line.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BorderWidth">
            <summary>
            The width of the line in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BorderDashOffset">
            <summary>
            Offset for line dashes.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BorderCapStyle">
            <summary>
            Gets or sets the cap style of the line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.BorderJoinStyle">
            <summary>
            Gets or sets the line join style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.Fill">
             <summary>
             Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end
            <para>Source: http://www.chartjs.org/docs/latest/charts/area.html#filling-modes</para>
            
             <para>Absolute dataset index    Number      1, 2, 3, ...</para>
             <para>Relative dataset index    String      '-1', '-2', '+1', ...</para>
             <para>Boundary                  String      'start', 'end', 'origin'</para>
             <para>Disabled                  Boolean     false</para>
            
             </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.LineTension">
            <summary>
            Bezier curve tension of the line. Set to 0 to draw straight lines.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointBackgroundColor">
            <summary>
            The fill color for points.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointBorderColor">
            <summary>
            The border color for points.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointBorderWidth">
            <summary>
            The width of the point border in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointRadius">
            <summary>
            The radius of the point shape. If set to 0, the point is not rendered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointRotation">
            <summary>
            The rotation of the point in degrees
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointStyle">
            <summary>
            Gets or sets the point style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointHitRadius">
            <summary>
            The pixel size of the non-displayed point that reacts to mouse events.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointHoverBackgroundColor">
            <summary>
            Point background color when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointHoverBorderColor">
            <summary>
            Point border color when hovered.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointHoverBorderWidth">
            <summary>
            Border width of point when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.RadarChart.RadarDataset.PointHoverRadius">
            <summary>
            The radius of the point when hovered
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.XAxisID">
            <summary>
            The ID of the x axis to plot this dataset on. If not specified, this defaults to the ID of the first found x axis
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.YAxisID">
            <summary>
            The ID of the y axis to plot this dataset on. If not specified, this defaults to the ID of the first found y axis.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderWidth">
            <summary>
            The width of the line in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderCapStyle">
            <summary>
            Gets or sets the cap style of the line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderJoinStyle">
            <summary>
            Gets or sets the line join style.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.CubicInterpolationMode">
            <summary>
            Gets or sets the algorithm used to interpolate a smooth curve from the discrete data points.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderDash">
            <summary>
            Length and spacing of dashes. It's an int array. Whatever JS!
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderDashOffset">
            <summary>
            Offset for line dashes.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.PointBorderWidth">
            <summary>
            The width of the point border in pixels.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.PointRadius">
            <summary>
            The radius of the point shape. If set to 0, the point is not rendered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.PointHitRadius">
            <summary>
            The pixel size of the non-displayed point that reacts to mouse events.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.PointHoverBorderWidth">
            <summary>
            Border width of point when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.PointHoverRadius">
            <summary>
            The radius of the point when hovered.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.Fill">
            <summary>
            How to fill the area under the line.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.LineTension">
            <summary>
            Bezier curve tension of the line. Set to 0 to draw straight lines. This option is ignored if monotone cubic interpolation is used.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.ShowLine">
            <summary>
            If false, the line is not drawn for this dataset.
            Default is true. If you are filling and don't want to show the line, then change to false.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.SpanGaps">
            <summary>
            If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.SteppedLine">
            <summary>
            If the line is shown as a stepped line. Use <see cref="T:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine"></see> for available options.
            <para>If the steppedLine value is set to anything other than <see cref="P:ChartJs.Blazor.ChartJS.Common.Enums.SteppedLine.False"></see>, <see cref="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.LineTension"></see> will be ignored.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BackgroundColor">
            <summary>
            The fill color under the line.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.ChartJS.ScatterChart.ScatterDataset.BorderColor">
            <summary>
            The color of the line.
            <para>See <see cref="T:ChartJs.Blazor.Util.ColorUtil"/> for working with colors.</para>
            </summary>
        </member>
        <member name="T:ChartJs.Blazor.Charts.ChartBase`1">
            <summary>
            Base type for all charts
            </summary>
            <typeparam name="TConfig"></typeparam>
        </member>
        <member name="P:ChartJs.Blazor.Charts.ChartBase`1.Config">
            <summary>
            The configuration of the chart to be drawn.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.Charts.ChartBase`1.Width">
            <summary>
            The width of the canvas HTML element used to draw the chart.
            </summary>
        </member>
        <member name="P:ChartJs.Blazor.Charts.ChartBase`1.Height">
            <summary>
            The height of the canvas HTML element used to draw the chart.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.Charts.ChartBase`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ChartJs.Blazor.Charts.ChartBase`1.Update">
             <summary>
             Updates the chart.
            
             <para>Call this method after you've changed something in the chart#s configuration</para>
             </summary>
             <returns></returns>
        </member>
        <member name="T:ChartJs.Blazor.Util.ColorUtil">
            <summary>
            Provides useful methods for working with colors. Particularly the conversion from different kinds of C#-colors to string colors which are understood by javascript/css.
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.Util.ColorUtil.ColorString(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces a string of the form 'rgba(r, g, b, 1)' with the provided rgb values where the alpha is fixed at 1
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.Util.ColorUtil.ColorHexString(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces a string of the form '#aabbc' with the provided rgb values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.Util.ColorUtil.ColorString(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with the provided rgb and alpha values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.Util.ColorUtil.RandomColorString">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with random values for rgb and alpha
            </summary>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.Util.ColorUtil.FromDrawingColor(System.Drawing.Color)">
            <summary>
            Generates the corresponding string representation (as hex) of a <see cref="T:System.Drawing.Color"></see> object.
            </summary>
            <returns>The string representation as a hex color string</returns>
        </member>
        <member name="T:ChartJs.Blazor.Util.PointUtil">
            <summary>
            Utility class for working with <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>s
            </summary>
        </member>
        <member name="M:ChartJs.Blazor.Util.PointUtil.GetRandomPoint(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/> whose x and y coordinates lay between the specified boundaries
            </summary>
            <param name="minX">Minimum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s x coordinate</param>
            <param name="maxX">Maximum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s x coordinate</param>
            <param name="minY">Minimum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s y coordinate</param>
            <param name="maxY">Maximum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s y coordinate</param>
            <returns></returns>
        </member>
        <member name="M:ChartJs.Blazor.Util.PointUtil.GetRandomPoints(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> whose x and y coordinates lay between the specified boundaries
            </summary>
            <param name="amount"></param>
            <param name="minX">Minimum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s x coordinate</param>
            <param name="maxX">Maximum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s x coordinate</param>
            <param name="minY">Minimum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s y coordinate</param>
            <param name="maxY">Maximum value for the <see cref="T:ChartJs.Blazor.ChartJS.Common.Point"/>'s y coordinate</param>
            <returns></returns>
        </member>
    </members>
</doc>
